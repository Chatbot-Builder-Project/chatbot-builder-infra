name: Deploy Manifests

on:
  repository_dispatch:
    types:
      - deploy_chatbot_staging
      - deploy_chatbot_production

permissions:
  contents: read

env:
  TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure Terraform Cloud Credentials
        run: |
          mkdir -p $HOME/.terraform.d
          cat <<EOF > $HOME/.terraform.d/credentials.tfrc.json
          {
            "credentials": {
              "app.terraform.io": {
                "token": "${TFC_TOKEN}"
              }
            }
          }
          EOF

      - name: Initialize Terraform and Retrieve Outputs
        run: |
          terraform -chdir=infra init
          terraform -chdir=infra output -json > terraform-outputs.json

      - name: Parse Terraform Outputs
        id: parse_outputs
        run: |
          PRODUCTION_IP=$(jq -r '.production_public_ip.value' terraform-outputs.json)
          STAGING_IP=$(jq -r '.staging_public_ip.value' terraform-outputs.json)
          
          # Parse kube_config object
          KUBE_HOST=$(jq -r '.kube_config.value.host' terraform-outputs.json)
          CLIENT_CERT=$(jq -r '.kube_config.value.client_certificate' terraform-outputs.json)
          CLIENT_KEY=$(jq -r '.kube_config.value.client_key' terraform-outputs.json)
          CA_CERT=$(jq -r '.kube_config.value.cluster_ca_certificate' terraform-outputs.json)

          # Write kubeconfig file
          cat <<EOF > kubeconfig
          apiVersion: v1
          clusters:
          - cluster:
              certificate-authority-data: $CA_CERT
              server: $KUBE_HOST
            name: aks-cluster
          contexts:
          - context:
              cluster: aks-cluster
              user: aks-user
            name: aks-context
          current-context: aks-context
          kind: Config
          preferences: {}
          users:
          - name: aks-user
            user:
              client-certificate-data: $CLIENT_CERT
              client-key-data: $CLIENT_KEY
          EOF

          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
          echo "PRODUCTION_IP=$PRODUCTION_IP" >> $GITHUB_ENV
          echo "STAGING_IP=$STAGING_IP" >> $GITHUB_ENV

      - name: Set Up Kubectl
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl version --client
          kubectl cluster-info

      - name: Determine Namespace and Overlay
        id: namespace_overlay
        run: |
          if [[ "${{ github.event.action }}" == "deploy_chatbot_staging" ]]; then
            echo "namespace=staging" >> $GITHUB_ENV
            echo "kustomize_overlay=manifests/overlays/staging" >> $GITHUB_ENV
            echo "load_balancer_ip=$STAGING_IP" >> $GITHUB_ENV
          elif [[ "${{ github.event.action }}" == "deploy_chatbot_production" ]]; then
            echo "namespace=production" >> $GITHUB_ENV
            echo "kustomize_overlay=manifests/overlays/production" >> $GITHUB_ENV
            echo "load_balancer_ip=$PRODUCTION_IP" >> $GITHUB_ENV
          else
            echo "Unknown event type. Exiting..."
            exit 1
          fi
        shell: bash

      - name: Set Load Balancer IP in Manifests
        run: |
          sed -i "s|\${LOAD_BALANCER_IP}|${{ env.load_balancer_ip }}|g" manifests/base/post-deployment/api-service.yaml

      - name: Update Deployment Manifests with New Image
        run: |
          IMAGE_FULL_NAME="${{ github.event.client_payload.image_full_name }}"
          IMAGE_MANIFEST_NAME="${{ github.event.client_payload.image_manifest_name }}"

          echo "Updating deployments for image: $IMAGE_FULL_NAME"

          # Find and replace occurrences of the image name in deployment manifests
          find manifests/base/deployment -type f \( -name "*.yaml" -o -name "*.yml" \) -exec \
          sed -i 's|image: '"$IMAGE_MANIFEST_NAME"'|image: '"$IMAGE_FULL_NAME"'|' {} \;

      - name: Apply Resources with Kustomize
        run: |
          echo "Applying resources using Kustomize overlay ${{ env.kustomize_overlay }}"
          kubectl apply -k ${{ env.kustomize_overlay }}
